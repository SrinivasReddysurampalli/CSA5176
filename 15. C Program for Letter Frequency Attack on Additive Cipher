#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// English letter frequencies (relative)
const float englishFreq[] = {8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.361, 0.150, 1.974, 0.074};

// Function to calculate the letter frequency of a given text
void calcFreq(const char *text, float freq[]) {
    int len = strlen(text);
    int count[ALPHABET_SIZE] = {0};

    for (int i = 0; i < len; i++) {
        if (isalpha(text[i])) {
            count[toupper(text[i]) - 'A']++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        freq[i] = (count[i] / (float) len) * 100;
    }
}

// Function to calculate score based on frequency match
float scoreText(const char *text) {
    float freq[ALPHABET_SIZE] = {0};
    calcFreq(text, freq);

    float score = 0.0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        score += (freq[i] * englishFreq[i]);
    }
    return score;
}

// Function to decrypt with additive cipher (Caesar cipher)
void decryptAdditiveCipher(const char *ciphertext, int key, char *plaintext) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = ((ciphertext[i] - base - key + ALPHABET_SIZE) % ALPHABET_SIZE) + base;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Function to perform the attack and print top N plaintexts
void attackAdditiveCipher(const char *ciphertext, int topN) {
    char candidate[1000];
    float scores[ALPHABET_SIZE];
    char plaintexts[ALPHABET_SIZE][1000];

    for (int key = 0; key < ALPHABET_SIZE; key++) {
        decryptAdditiveCipher(ciphertext, key, candidate);
        scores[key] = scoreText(candidate);
        strcpy(plaintexts[key], candidate);
    }

    // Print top N plaintexts based on the highest scores
    printf("Top %d possible plaintexts:\n", topN);
    for (int i = 0; i < topN; i++) {
        int maxIndex = 0;
        for (int j = 1; j < ALPHABET_SIZE; j++) {
            if (scores[j] > scores[maxIndex]) {
                maxIndex = j;
            }
        }
        printf("Key %d: %s (Score: %.2f)\n", maxIndex, plaintexts[maxIndex], scores[maxIndex]);
        scores[maxIndex] = -1;  // Exclude this score in the next round
    }
}

int main() {
    char ciphertext[] = "Ymnx nx f xjhwjy tk ymj rjxxflj.";
    int topN = 10;

    attackAdditiveCipher(ciphertext, topN);

    return 0;
}
