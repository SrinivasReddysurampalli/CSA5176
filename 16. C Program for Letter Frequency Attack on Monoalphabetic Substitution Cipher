#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

const float englishFreq[] = {8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.361, 0.150, 1.974, 0.074};

// Function to calculate frequency of each letter in the ciphertext
void calcFreq(const char *text, float freq[]) {
    int count[ALPHABET_SIZE] = {0};
    int totalLetters = 0;

    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            count[toupper(text[i]) - 'A']++;
            totalLetters++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        freq[i] = (count[i] / (float) totalLetters) * 100;
    }
}

// Function to guess the substitution mapping
void generateMapping(float textFreq[], char map[]) {
    char alphabet[] = "ETAOINSHRDLCUMWFGYPBVKJXQZ";  // Common English letters in decreasing order of frequency
    int used[ALPHABET_SIZE] = {0};

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        float maxFreq = -1.0;
        int maxIdx = 0;
        for (int j = 0; j < ALPHABET_SIZE; j++) {
            if (textFreq[j] > maxFreq && !used[j]) {
                maxFreq = textFreq[j];
                maxIdx = j;
            }
        }
        map[maxIdx] = alphabet[i];
        used[maxIdx] = 1;
    }
}

// Function to decrypt with guessed map
void decryptSubstitution(const char *ciphertext, const char *map, char *plaintext) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            int index = toupper(ciphertext[i]) - 'A';
            plaintext[i] = islower(ciphertext[i]) ? tolower(map[index]) : map[index];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

int main() {
    char ciphertext[] = "Gsrh rh z hvxivg zmvxlmrk.";
    float freq[ALPHABET_SIZE];
    char map[ALPHABET_SIZE];
    char plaintext[1000];

    // Analyze frequency of the ciphertext
    calcFreq(ciphertext, freq);

    // Generate guessed substitution mapping
    generateMapping(freq, map);

    // Decrypt the ciphertext
    decryptSubstitution(ciphertext, map, plaintext);

    printf("Decrypted message: %s\n", plaintext);

    return 0;
}
